#version 430 core
#define N 256
#define G 32
#define dx (1.0 / G)
#define dt 2e-4
#define p_rho 1
#define p_vol sqr(dx * 0.5)
#define p_mass (p_vol * p_rho)
#define E 400
#define bound 3
#define gravity 9.8

layout (std430, binding = 0) buffer b0 {
  vec2 x[];
};
layout (std430, binding = 1) buffer b1 {
  vec2 v[];
};
layout (std430, binding = 2) buffer b2 {
  mat2 C[];
};
layout (std430, binding = 3) buffer b3 {
  float J[];
};
layout (std430, binding = 4) buffer b4 {
  vec2 grid_v[];
};
layout (std430, binding = 5) buffer b5 {
  float grid_m[];
};

layout (local_size_x = G, local_size_y = G) in;

void main()
{
  uvec2 ij = gl_GlobalInvocationID.xy;
  uint g_ = ij.x * G + ij.y;

  if (grid_m[g_] > 0)
    grid_v[g_] /= grid_m[g_];
  grid_v[g_].y -= dt * gravity;
  if (ij.x < bound && grid_v[g_].x < 0 ||
      ij.x > G - bound && grid_v[g_].x > 0) {
    grid_v[g_].x = 0;
  }
  if (ij.y < bound && grid_v[g_].y < 0 ||
      ij.y > G - bound && grid_v[g_].y > 0) {
    grid_v[g_].y = 0;
  }
}
